thanos:
  ${ indent(4,yamlencode({"objstoreConfig": thanos.bucket_config})) }

  storegateway:
    enabled: true
    createConfigMap: true

  query:
    dnsDiscovery:
      sidecarsService: kube-prometheus-stack-thanos-discovery
      sidecarsNamespace: kube-prometheus-stack

  bucketweb:
    enabled: true
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: "${cluster_issuer}"
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.tls: "true"
        ingress.kubernetes.io/ssl-redirect: "true"
        kubernetes.io/ingress.allow-http: "false"
      hostname: "thanos-bucketweb.apps.${base_domain}"
      extraHosts:
        - name: "${thanos.bucketweb_domain}"
      tls: true
      extraTls:
        - secretName: thanos-bucketweb-tls
          hosts:
            - "${thanos.bucketweb_domain}"
            - "thanos-query.apps.${base_domain}"

  queryFrontend:
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: "${cluster_issuer}"
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.tls: "true"
        ingress.kubernetes.io/ssl-redirect: "true"
        kubernetes.io/ingress.allow-http: "false"
      hostname: "thanos-query.apps.${base_domain}"
      extraHosts:
        - name: "${thanos.query_domain}"
      tls: true
      extraTls:
        - secretName: thanos-query-tls
          hosts:
            - "${thanos.query_domain}"
            - "thanos-query.apps.${base_domain}"
